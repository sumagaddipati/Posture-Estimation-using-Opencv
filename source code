import cv2
import numpy as np
import time
import pose_module as pm

cap = cv2.VideoCapture("videos/poses/workouts/dumbbell (3).mp4")
detector = pm.PoseDetector()
count = 0
dir = 0  # 0 = going down, 1 = going up
pTime = 0

# Store min/max angles dynamically
min_angle = float('inf')
max_angle = float('-inf')

while True:
    success, img = cap.read()
    if not success:
        print("Error: Could not read frame. Video might have ended.")
        break

    img = cv2.resize(img, (700, 650))
    img = detector.findPose(img, False)
    lmList = detector.findPosition(img, False)

    if len(lmList) != 0:
        angle = detector.find_angle(img, 12, 14, 16)  # Right arm

        # Dynamically update min/max angles
        if angle < min_angle:
            min_angle = angle
        if angle > max_angle:
            max_angle = angle

        # Map movement dynamically
        per = np.interp(angle, (min_angle, max_angle), (0, 100))
        bar = np.interp(angle, (min_angle, max_angle), (650, 100))

        #print(f"Angle: {angle}, Min: {min_angle}, Max: {max_angle}, Percentage: {per}, Dir: {dir}")

        color = (255, 0, 255)

        # Check if the movement has reached its peak
        if per > 90:  # Upper limit reached
            color = (0, 255, 0)
            if dir == 0:  # Only count when going up
                count += 1
                dir = 1  # Now going down

        if per < 10:  # Lower limit reached
            color = (0, 255, 0)
            if dir == 1:  # Only switch when coming down
                dir = 0  # Now going up

        print(f"Updated Count: {count}")

        # Draw Bar
        cv2.rectangle(img, (1100, 100), (1175, 650), color, 3)
        cv2.rectangle(img, (1100, int(bar)), (1175, 650), color, cv2.FILLED)
        cv2.putText(img, f'{int(per)} %', (1100, 75), cv2.FONT_HERSHEY_PLAIN, 4, color, 4)

        # Draw Count
        cv2.rectangle(img, (0, 450), (250, 720), (0, 255, 0), cv2.FILLED)
        cv2.putText(img, str(int(count)), (45, 670), cv2.FONT_HERSHEY_PLAIN, 15, (255, 0, 0), 25)

    cTime = time.time()
    fps = 1 / (cTime - pTime)
    pTime = cTime
    cv2.putText(img, str(int(fps)), (50, 100), cv2.FONT_HERSHEY_PLAIN, 5, (255, 0, 0), 5)

    cv2.imshow("Image", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # Press 'q' to exit
        break

cap.release()
cv2.destroyAllWindows()
