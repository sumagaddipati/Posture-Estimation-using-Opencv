import cv2
import mediapipe as mp
import time
import os
import math

class PoseDetector():
    def __init__(self, mode=False, detectionCon=0.5, trackCon=0.5):
        self.mode = mode
        self.detectionCon = detectionCon
        self.trackCon = trackCon

        self.mpDraw = mp.solutions.drawing_utils
        self.mpPose = mp.solutions.pose
        self.pose = self.mpPose.Pose(
            static_image_mode=self.mode,
            min_detection_confidence=self.detectionCon,
            min_tracking_confidence=self.trackCon
        )

    def findPose(self, img, draw=True):
        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        self.results = self.pose.process(imgRGB)

        if self.results.pose_landmarks and draw:
            self.mpDraw.draw_landmarks(img, self.results.pose_landmarks, self.mpPose.POSE_CONNECTIONS)

        return img

    def findPosition(self, img, draw=True):
        self.lmList = []
        if self.results.pose_landmarks:
            for id, lm in enumerate(self.results.pose_landmarks.landmark):
                h, w, _ = img.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                self.lmList.append([id, cx, cy])

                if draw:
                    cv2.circle(img, (cx, cy), 5, (255, 0, 0), cv2.FILLED)

        return self.lmList
    def find_angle(self,img,p1,p2,p3,draw=True):
        
        #get the landmarks
        x1,y1=self.lmList[p1][1:]
        x2,y2=self.lmList[p2][1:]
        x3,y3=self.lmList[p3][1:]
        #calculate angle
        angle=math.degrees(math.atan2(y3-y2,x3-x2)-math.atan2(y1-y2,x1-x2))
        if angle<0:
            angle+=360
        
        #print(angle)
        
        
        #draw
        if draw:
            
            #line across the joints
            cv2.line(img,(x1,y1),(x2,y2),(255,255,255),2)
            cv2.line(img,(x2,y2),(x3,y3),(255,255,255),2)
            
            cv2.circle(img, (x1,y1), 5, (255, 0, 0), cv2.FILLED)
            cv2.circle(img, (x1,y1), 10, (255, 0, 0), 2)
            
            cv2.circle(img, (x2,y2), 5, (255, 0, 0), cv2.FILLED)
            cv2.circle(img, (x2,y2), 10, (255, 0, 0), 2)
            
            cv2.circle(img, (x3,y3), 5, (255, 0, 0), cv2.FILLED)
            cv2.circle(img, (x3,y3), 10, (255, 0, 0), 2)
            
            #text format of angle
            cv2.putText(img,str(int(angle)), (x2-50,y2+50), cv2.FONT_HERSHEY_PLAIN, 1, (0, 0, 255), 2)
            
        return angle
  
def main():
    video_path = "videos/poses/pose_videos/pose (7).mp4"

    # Check if file exists before opening
    assert os.path.exists(video_path), f"❌ Error: Video file not found at {video_path}"

    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("❌ Error: Could not open video file!")
        return

    pTime = 0
    detector = PoseDetector()

    while True:
        success, img = cap.read()

        if not success or img is None:
            print("✅ Video finished or error reading frame.")
            break
        #cv2.circle(img,(lmList[14][1],lmList[14][2]),15,(0,0,225),cv2.FILLED)

        # Resize while maintaining aspect ratio
        height, width = img.shape[:2]
        aspect_ratio = width / height
        new_width = 500
        new_height = int(new_width / aspect_ratio)
        img = cv2.resize(img, (new_width, new_height))

        img = detector.findPose(img)
        lmList = detector.findPosition(img, draw=False)
#elbow point
        #if lmList:
         #   print(lmList[14])
          #  cv2.circle(img, (lmList[14][1], lmList[14][2]), 5, (0, 0, 255), cv2.FILLED)

        # FPS Calculation
        cTime = time.time()
        fps = int(1 / (cTime - pTime)) if (cTime - pTime) > 0 else 0
        pTime = cTime

        cv2.putText(img, f'FPS: {fps}', (70, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)

        cv2.imshow("Pose Estimation", img)

        if cv2.waitKey(25) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
